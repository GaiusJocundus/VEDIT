


VEDIT - Visual Editor					      Page 20
Command Mode - Properties


Properties
----------

     In command mode  all character  output goes  to the  current CP/M
console output device.  The  user enters command  lines, which consist
of single commands,  strings  of  commands  or iteration macros.  Each
command line is ended with an  [ESC] [ESC], at which point the command
line is executed.  The [ESC]  is also used  to delimit search strings.
In the event that  your keybaord does  not have an  [ESC] key, you may
customize the command mode  escape character  to be  any other control
character.

     Each character typed is echoed by VEDIT and none are processed by
CP/M.  Thus the [CTRL-C] has a different meaning in VEDIT and does not
cause a return to CP/M.  The [ESC] is echoed with a "$", which is also
used in the  examples in  this manual  to signify  the [ESC] key.  The
[RETURN] or [CR] key is echoed with  a [CR] [LF] pair, and the pair is
also entered into the  command line.  Although this  causes a new line
to be printed, it is  still part of the command  line and does not end
the command line.

     The user is prompted for a new command line by the "*" character.
If, while typing, the command line should exhaust the amount of memory
space available to  it, (the  text buffer,  text register  and command
line all share the  same  memory  space)  VEDIT  will  send the "Bell"
character to  the  console  and  neither  accept  nor  echo  any  more
characters.  The user will then have to  edit the current command line
in order to end  it and then rectify  the full memory situation.  Even
when the memory is full, (see "U" command) up to ten characters may be
typed on the command line.

     Before the command line  is ended and  begins executing, the line
may be edited  with  most  common  line  editing characters.  They are
described  in  detail  below  under  "Line  Editing".  Once  execution
begins, it may often  be  aborted  by  typing  the [CTRL-C] character.
This causes a *BREAK*  and a  new command  mode prefix  to be printed.
VEDIT checks for the  [CTRL-C] before any new  command is executed and
also during the execution of the "A",  "F", "N", and "T" commands, and
in a few other situations.

     A useful feature for  some search  operations is  the special "|"
character.  Each "|" in  the  string  being  searched  will  match any
character in the text.  Thus the search string "C|N" will match "CAN",
"C1N", "C N" and others.  Similarly, "C||E"  will match "CONE", "C NE"
and others.

     (Please note  that  the  bracket  characters  used  for iteration
macros are printed as "["  and "]" in this  manual.  Some users may be
more  familiar  with  the  angle   brackets  " "  and  " ".  The  user
determines which characters to use during the customization process.)












VEDIT - Visual Editor					      Page 21
Brief Command Description


	'n' denotes a positive number. (# represents 32767)
	'm' denotes a number which may  be negative to denote backwards
	    in the text buffer.

	'string', 's1' and  's2' denote  strings which  may include the
	   [RETURN] key in  them.  'string' and 's1'  may also include
	   the "wildcard" character "|", each  of which will match any
	   character during the search.

	'file' is a disk file name  in normal CP/M format with optional
	   disk drive and extension.


nA		Append 'n' lines from  the input  file to  the end of
		the text buffer.  "0A" performs an auto-read.

B		Move the edit  pointer to  the beginning  of the text
		buffer.

mC		Move the edit pointer by 'm' positions.

mD		Delete 'm' characters from the text.

E		First letter of extended two letter commands.

nFstring[ESC]	Search for the  'n'th  occurrence of  'string' in the
		current text buffer  and  position  the  edit pointer
		after it.

G		Insert the contents of the  text register at the edit
		pointer.

Itext[ESC]	Insert the 'text'  into the  text buffer  at the edit
		pointer.

mK		Kill 'm' lines.

mL		Move the edit pointer  by 'm' lines  and leave at the
		beginning of that line.

nNstring[ESC]	Search for the 'n'th occurrence  of 'string' and read
		more of the  file from  disk if  necessary.  The edit
		pointer is positioned  after last  'string' if found,
		else not moved or  left at the  beginning of the text
		buffer.

mP		Put 'm' lines  of text into  the text register.  "0P"
		empties the text register.

Ss1[ESC]s2[ESC]	Search for the  next  occurrence  of  's1' within the
		current text buffer, and if found, change to 's2'.











VEDIT - Visual Editor					      Page 22
Brief Command Description


mT		Print (type)  'm' lines.

U		Print # of  free bytes  remaining /  # bytes  in text
		buffer/ # bytes in text register.

V		Go  into  visual  mode.  Set   cursor  position  from
		current edit pointer.

nW		Write 'n' lines to the disk from the beginning of the
		text buffer  and  delete  from  the  text buffer.  0W
		writes out the text buffer up to the current line.

Z		Move the edit  pointer to  the last  character in the
		text buffer.
















































VEDIT - Visual Editor					      Page 23
Brief Command Description



EXTENDED COMMANDS


EA		   Restart the editor by completely writing the output
		   file, closing it,  and then opening the output file
		   again  with  an  EB.  The   text  register  is  not
		   disturbed.

EBfile		   Open the file  "file" for  both Read  and Write and
		   then perform an auto-read if the input file exists.
		   If the file does not  exist, "NEW FILE" is printed.
		   Gives error if an output file is still open.

EC		   Allow user to  change  disks,  primarily  for write
		   error recovery.

EDfile		   Delete (erase) the file "file" from the disk.  This
		   is primarily intended for write error recovery.

EF		   Close the current output file.

EGfile[line range] Insert the specified line  number range of the file
		   "file" into the text buffer at the edit pointer.

nEI		   Insert the character  whose  decimal  value  is "n"
		   into the text buffer at the edit pointer.  Only the
		   value "26" is  not allowed  since this  is the CP/M
		   "End of File" marker.

EP  n  k	   Change  the  value   of  parameter  "n"  to  "k".
		   Currently there are the following parameters:

	1	   Cursor type  (Mem Mapped Only)	(0, 1 or 2)
	2	   Cursor blink rate			(5 - 100)
	3	   Indent Increment			(1 - 20)
	4	   Lower case convert			(0, 1 or 2)
	5	   Conditional convert character	(32 - 126)

EQ		   Quit the edit session and  leave disk files exactly
		   as before the session started.

ERfile		   Open the file "file" for input. Gives error if file
		   does not exist.


















VEDIT - Visual Editor					      Page 24
Brief Command Description


ES n k		Change the  value of  switch "n"  to "k". Currently
		there are the following switches:

	1	Expand Tab with spaces			(0=NO 1=YES)
	2	Auto buffering in visual mode		(0=NO 1=YES)
	3	Start in visual mode			(0=NO 1=YES)
	4	Point past text reg. insert		(0=NO 1=YES)
	5	Ignore UC/LC distinction in search	(0=NO 1=YES)
	6	Clear screen on Visual Exit		(0=NO 1=YES)
	7	Reverse Upper and Lower case		(0=NO 1=YES)

ET		Set new tab positions.  The ET is followed by up to
		30 decimal numbers  specifying  the  tab positions.
		Since  the  positions   start  at   1,  the  normal
		positions would be: 9 17 25 33 etc.

EV		Print the VEDIT version number.

EWfile		Open the file "file" for output.  Any existing file
		by  that  name   will  be   renamed  to  "file.BAK"
		following an EF  or EX.  Gives  error if  an output
		file is already open.

EX		Exit back to  CP/M after  writing the  text and any
		unappended part of  the  input  file  to the output
		file.  Gives error if no output file is open.




































VEDIT - Visual Editor					      Page 25
Command Mode - Detailed Command Description


			     nA     Append
			     --     ------

Example:	100A$$		0A$$

Description:	This command will append 'n'  lines from the input file
		to the  end of  the text  buffer.  Fewer lines  will be
		appended if there is insufficient  memory space for 'n'
		lines, or there  are  not  'n'  lines  remaining in the
		input file.  If 'n'  is 0,  an auto-read  is performed,
		which reads all  of the  input file  or until  the main
		memory is almost full.  The command can be issued (with
		'n' not zero) after an auto-read to read in more of the
		file.  An error is given if there is no input file open
		when this command  is  issued.  The  input  file can be
		opened with the EB  and ER  commands, or  when VEDIT is
		invoked from CP/M.

Notes:		No indication  is given  if fewer  than 'n'  lines were
		appended.  Use the "U"  command to see  if anything was
		appended.  If the text  buffer is  completely full, the
		text register cannot be  used and visual  mode will not
		work well.

See Also:	Commands: U, W, EB, EG, ER
		Auto-Read

Examples:       ERTEXT.DOC$$
		0A$$		The file 'TEXT.DOC'  is opened  and all
				of the file  is read  in, or  until the
				memory is almost full.































VEDIT - Visual Editor					      Page 26
Command Mode - Detailed Command Description


			    B     Beginning
			    -     ---------

Example:	B$$

Description:	This command moves the edit pointer to the beginning of
		the text buffer.  The beginning of the text buffer will
		not be the beginning of the  text file if a "W" command
		or an auto-write was done.  In  this case, use the "EA"
		command to move back to the beginning of the text file.

Notes:

See Also:	Commands: EA, Z

Examples:	B12T$$		Moves the edit pointer to the beginning
				of the text buffer and prints the first
				12 lines.





			     mC     Change
			     --     ------

Example:	12C$$		-4C$$

Description:	This command moves  the edit  pointer by  'm' character
		positions, forwards if 'm' is positive and backwards if
		'm' is  negative.  The  edit  pointer  cannot  be moved
		beyond the beginning or the end of the text buffer, and
		an attempt to do so will  leave the edit pointer at the
		beginning or the end respectively.  Remember that every
		line normally ends  in  a  [CR] [LF]  (carriage return,
		line feed), which represents two character positions.

Notes:

See Also:	Commands: D, L

Examples:	Fhello$-5C$$	Searches for the  word "hello",  and if
				it is found, positions the edit pointer
				at the beginning of the word.


















VEDIT - Visual Editor					      Page 27
Command Mode - Detailed Command Description


			     mD     Delete
			     --     ------

Example:	12D$$		-4D$$

Description:	This command  deletes  'm'  characters  from  the  text
		buffer, starting at  the current  edit pointer.  If 'm'
		is positive,  the  'm'  characters  immediately  at and
		following the  edit  pointer  are  deleted.  If  'm' is
		negative, the 'm' characters preceding the edit pointer
		are deleted.  Fewer than 'm' characters will be deleted
		if the ends of the text buffer are reached.

Notes:

See Also:	Commands: C, K

Examples:	100<FBIKES$-D$>$$   The 'S' will be  deleted from up to
				100 occurrences of the word 'BIKES'.





			E     Extended Commands
			-     -----------------

Example:	EX$$		EV$$

Description:	This is not a  command  by  itself  but  just the first
		letter of all the extended commands.

Notes:		No error is given if just E$$ is given.

See Also:	Extended commands.

Examples:

























VEDIT - Visual Editor					      Page 28
Command Mode - Detailed Command Description


			  nFs1[ESC]     Find
			  ---------     ----

Example:	Fmispell$$	10Fwords$$	F$$

Description:	This command searches  the text  buffer, beginning from
		the current edit  pointer, for the  'n'th occurrence of
		the string 's1'.  The  edit pointer  will be positioned
		after the last  character  of  the  'n'th occurrence of
		's1' if it is  found.  If the 'n'th  occurrence of 's1'
		is not found,  an error  will be  printed and  the edit
		pointer will be positioned after the last occurrence of
		's1' found, or be  left at its  original position if no
		occurrences  of  's1'  were  found.  If  no  string  is
		specified,  the  search   will  reuse   the  previously
		specified string.  The switch  "Ignore Upper/Lower case
		distinction" will determine  if the  search will ignore
		the distinction between  upper and  lower case letters.
		If the search is  to include parts of  the file not yet
		in the text buffer, use the "N" command.

Notes:		The search is  always forward,  never backwards.  While
		ignoring the upper/lower  case  distinction  is usually
		more convenient, the search will take longer.  Remember
		that the "wild  card" character  can be  used.  For the
		command form "#Fs1[ESC]", an error  is only given if no
		occurrences of 's1' are found.

See Also:	Command: N

Examples:	BFhello$$	Searches for the word  "hello" from the
				beginning of the text buffer.

		#<3Ffirst$-5DIthird$>$$ Changes every  third occurrence
				of the word "first" to "third".

		Z-100LFend$$    Find the word  "end" if  it occurres in
				the last 100 lines of the text buffer.

		#<Ffix up$V>$$  Finds the next occurrence of the string
				"fix up" and  enters  Visual mode.  Any
				changes can  be  made  in  Visual mode.
				When Visual mode  is  exited,  the next
				occurrence of "fix it"  is found and so
				on.

		F$V$$           The next  occurrence  of  the  previous
				specified string  is found,  and visual
				mode is then entered.













VEDIT - Visual Editor					      Page 29
Command Mode - Detailed Command Description


			       G     Get
			       -     ---

Example:	G$$

Description:	This command inserts a copy of the text register at the
		current edit pointer.  If there  is insufficient memory
		space for the entire  copy, nothing is  inserted and an
		error message is given.  If the text register is empty,
		nothing is inserted.  The contents of the text register
		are not affected  by this command.  The  "P" command or
		visual mode is used to place text in the text register.

Notes:

See Also:	Commands: P
		Visual Mode text move.

Examples:	BG$$		Inserts  the   contents  of   the  text
				register at the  very beginning  of the
				text buffer.

		12<G>$$         Inserts  the   contents  of   the  text
				register twelve  times  at  the current
				edit pointer.

		132P132K$$
		EA$$
		10LG$$          Moves 132 lines  of text,  by saving it
				in  the  text   register,  killing  the
				original lines  and inserting  the text
				after the  tenth line  of the  file, in
				the situation  where  the  beginning of
				the file  is  no  longer  in  the  text
				buffer.



























VEDIT - Visual Editor					      Page 30
Command Mode - Detailed Command Description


			 Itext[ESC]     Insert
			 ----------     ------

Example:	Ia word$$	I[RETURN]new line$$

Description:	This command inserts  the  text  'text'  into  the text
		buffer, starting  at  the  current  edit  pointer.  The
		insertion is  complete  when  the  [ESC]  character  is
		encountered.  The inserted text does  not overwrite any
		existing text.  The  'text'  may  contain  the [RETURN]
		key, which is expanded to  carriage return - line feed.
		If insufficient memory  space exits for  the 'text', an
		error will be printed and only  part of the 'text' will
		have been inserted.  The  edit  pointer  is  moved just
		past the inserted text.  This  command is probably best
		used in iteration  macros, since  normal text insertion
		is much easier to do in visual mode.

Notes:		Some control characters, including  the [ESC], can only
		be inserted with  the "EI"  command.  The tab character
		is not expanded  with spaces  as is  optional in visual
		mode.

See Also:	Commands: EI

Examples:	200<I[CR][TAB]$>$$  Inserts   200   new   lines,   each
				beginning with a tab character.



































VEDIT - Visual Editor					      Page 31
Command Mode - Detailed Command Description


			      mK     Kill
			      --     ----

Example:	4K$$		-3K$$		0K$$

Description:	This command  performs  a  line  oriented  deletion (or
		killing) of text.  If  'm' is  positive, all characters
		from the current edit  pointer and up  to and including
		the 'm'th [LF]  are deleted  from the  text buffer.  If
		'm' is  negative,  all  characters  preceding  the edit
		pointer on the current line and the 'm' preceding lines
		are deleted.  If 'm' is 0, all characters preceding the
		edit pointer on  the  current  line  are deleted. Fewer
		than 'm' lines will be killed if either end of the text
		buffer is reached.

Notes:

See Also:	Command: D, T

Examples:	#<Ftemp line$0LK>$$ Kills  all lines  which contain the
				string "temp line".

		-10000K$$       Kills all text before the edit pointer.

		#P#K$$          Saves the rest  of  the  text  from the
				edit pointer in  the text  register and
				then deletes it from the text buffer.


































VEDIT - Visual Editor					      Page 32
Command Mode - Detailed Command Description


			     mL     Lines
			     --     -----

Example:	120L$$		-14L$$		0L$$

Description:	This command performs  a line oriented  movement of the
		edit pointer, and  the edit  pointer is  always left at
		the beginning of a line.  If  'm' is positive, the edit
		pointer is left  following the  'm'th [LF].  If  'm' is
		negative, the edit pointer is  left at the beginning of
		the 'm'th  preceding  line.  If  'm'  is  0,  the  edit
		pointer it moved to the  beginning of the current line.
		Attempting to  move past  the ends  of the  text buffer
		will leave the  edit  pointer  at  the  respective end.
		This command makes no changes to the text buffer.

Notes:

See Also:	Commands: C, T

Examples:	#<Stypo$type$0LT>$$ Changes  all occurrences  of "typo"
				to "type"  and  prints  out  every line
				that was changed.







































VEDIT - Visual Editor					      Page 33
Command Mode - Detailed Command Description


			  nNs1[ESC]     Next
			  ---------     ----

Example:	Nbad line$$	3Nthird$$

Description:	This command is very similar to the "F" command, except
		that if the 'n'th  occurrence of  's1' is  not found in
		the text buffer, auto-read/writes are performed to read
		in more of the input file until the 'n'th occurrence is
		found or the end of the  input file is reached.  If the
		'n'th occurrence  still  is  not  found,  an  error  is
		printed.  The edit  pointer  is  also  positioned  very
		similar to  the "F"  command, except  in the  event the
		'n'th occurrence is  not found and  neither the 'n-1'th
		occurrence nor  the original  edit pointer  position is
		any longer in the  text buffer.  In this  case the edit
		pointer is positioned  at  the  beginning  of  the text
		buffer.  Using this command  with  an  's1',  which you
		know does not  exist, can  be used  to access  the last
		part of a large file.

Notes:		All Notes for the "F" command also apply.

See Also:	Command: F
		Auto Buffering

Examples:	#<Ntypo$-4DItype$>$$    Changes all occurrences  of the
				string "typo" to "type"  in the rest of
				the file.

		Nxcxc$$         Accesses the  last  part  of  the file,
				assuming the string "xcxc" never occurs
				in it.





























VEDIT - Visual Editor					      Page 34
Command Mode - Detailed Command Description


			      mP     Put
			      --     ---

Example:	40P$$		-20P$$		0P$$

Description:	This command saves a  copy of the  specified text lines
		in the text  register.  The  previous  contents  of the
		text register are destroyed.  The  range of lines saved
		is the same as for the  "K" or "T" commands.  If 'm' is
		zero, the text register is  simply emptied, and nothing
		is saved  in it.  Since  the text  buffer and  the text
		register share the  same memory  space, saving  text in
		the  text  register  decreases  the  amount  of  memory
		available to  the text  buffer.  Thus the  "0P" command
		should be  given  when  the  saved  text  is  no longer
		needed.  This command does not  change the text buffer.
		If there is  insufficient  memory  space  for  the text
		copy, the text  register  is  only  emptied, nothing is
		saved in it and an error is printed.  The saved text is
		inserted in the text buffer with  the "G" command or in
		Visual mode.

Notes:		If the "P"  command occurs  within an  iteration macro,
		the macro is aborted following the command.

See Also:	Commands: G, K, T
		Visual Mode text move

Examples:	120P120K$$      The text  lines are  saved in  the text
				register and then deleted from the text
				buffer.

		-23T$$
		-23P$$          The  text   lines   are   printed   for
				verification before  they are  saved in
				the text register.


























VEDIT - Visual Editor					      Page 35
Command Mode - Detailed Command Description


		    nSs1[ESC]s2[ESC]     Substitute
		    ----------------     ----------

Example:	Stypo$type$$	#Sname$Mr. Smith$$

Description:	This  command  performs   'n'  search   and  substitute
		operations.  Each operation  consists of  searching for
		the next occurrence  of  's1'  in  the  text buffer and
		changing it to  's2'.  An error  is printed  if 's1' is
		not found.  If there  is insufficient  memory space for
		inserting 's2', 's1' will have  been changed to as much
		of 's2' as possible and  an error is printed.  The edit
		pointer is positioned after 's2',  if 's1' is found, or
		else is left at  its original  position if  's1' is not
		found.  For the  commmand  form  "#Ss1[ESC]s2[ESC],  an
		error is only  given  if  no  occurrences  of  's1' are
		found.  See the "N" command example on how to perform a
		"substitute" if all of  the  file  is  not  in the text
		buffer.

Notes:		All Notes  for  the  "F"  command  apply  here  too.  A
		command like #Sfishes$fish$$  will execute  much faster
		than the equivalent command #<Sfishes$fish$>$$

See Also:	Commands: F, N, I

Examples:	#Stypo$type$$   Changes all  occurrences  of  "typo" to
				"type".

		#<Stypo$type$0LT>   Changes all  occurrences  of "typo"
				to "type"  and  prints  out  every line
				that was changed.

		#<Sname$smith$V>$$  Change  the   next   occurrence  of
				"name" to "smith" and enter into Visual
				mode.  Any  changes  can   be  made  in
				Visual mode  and  when  Visual  mode is
				exited, the  next occurrence  of "name"
				will be searched and so on.

		#Sgarbage$$     Deletes all  occurrences of  the string
				"garbage" from  the  rest  of  the text
				buffer.



















VEDIT - Visual Editor					      Page 36
Command Mode - Detailed Command Description


			      mT     Type
			      --     ----

Example:		14T$$		-6T$$		0T$$

Description:	This command prints  (types)  the  specified lines.  If
		'm' is positive,  all characters from  the edit pointer
		up to and including  the 'm'th [LF]  are typed.  If 'm'
		is negative, the previous 'm'  lines and all characters
		up to just preceding the  edit pointer are printed.  If
		'm' is 0,  only  the  characters  on  the  present line
		preceding the edit pointer are printed.  Fewer than 'm'
		lines will be printed if either  end of the text buffer
		is reached.  Note that  "0TT"  will  print  the current
		line regardless of the position  of the edit pointer on
		it.  This command does not move the edit pointer.  This
		command is most useful in iteration macros for printing
		selected lines.  Visual mode should be used for looking
		at sections of a file.
Notes:

See Also:

Examples:	#<Fmoney$0TT>$$ Prints  out  every  line  in  the  text
				buffer with the string "money" in it.





		      U     Unused (Free Memory)
		      -     --------------------

Example:	U$$

Description:	This command prints the number of memory bytes free for
		use by the  text buffer  or text  register, followed by
		the number of  memory  bytes  used  by  the text buffer
		(length of the text buffer),  followed by the number of
		memory bytes used by  the text register  (length of the
		text register).

Notes:		These three numbers will not always  add up to the same
		total, since several  other  buffers  all  use the same
		memory space.  If the  number of free  bytes goes below
		260, the "FULL" flag will be set when in visual mode.

See Also:

Examples:












VEDIT - Visual Editor					      Page 37
Command Mode - Detailed Command Description


			     V     Visual
			     -     ------

Example:	V$$

Description:	This command  enters  Visual  Mode.  The  visual cursor
		position will be  set  from  the  current  edit pointer
		position.  Visual  mode  is  exited   with  either  the
		"Visual Exit"  or  the  "Visual  Escape" character.  At
		that time the edit pointer will  be set from the cursor
		position.

Notes:		The text register is preserved.

See Also:	Visual Mode

Examples:	Fhere$V$$	Find the word  "here" and  enter visual
				mode.




			     nW     Write
			     --     -----

Example:	20W$$		#W$$		0W$$

Description:	This command writes 'n' lines from the beginning of the
		text buffer to the  output file and  then deletes these
		lines from the text buffer.  If there are less than 'n'
		lines in  the text  buffer, the  entire text  buffer is
		written out and  deleted.  If 'n'  is zero,  the entire
		text  buffer  up  to  the  line  the  edit  pointer  is
		currently on,  is  written  out.  The  edit  pointer is
		moved to the new  beginning of the  text buffer.  If no
		output file is open, an error is printed and no text is
		output nor deleted.  The output file can be opened with
		an "EW" or "EB" command or when VEDIT is invoked.

Notes:		No indication is  given  if  less  than  'n' lines were
		written.

See Also:	Commands: A, EB, EW, EX

Examples:	EWpart1.txt$$
		24W$$
		EF$$
		EWpart2.txt$$
		EX$$		The first 24  lines of  the text buffer
				are written out to file "PART1.TXT" and
				the rest of the  text buffer is written
				out to file  "PART".TXT"  and  the edit
				session is completed.









VEDIT - Visual Editor					      Page 38
Command Mode - Detailed Command Description


				Z     Zip
				-     ---

Example:	Z$$

Description:	This  command  moves  the  edit  pointer  to  the  last
		character in the text buffer.

Notes:		This command does not move the edit pointer to the last
		character in the file  if the last part  of the file is
		not yet in the text buffer.  See the "N" command on how
		to bring the  last  part  of  the  file  into  the text
		buffer.

See Also:	Commands: B, N

Example:	Z-100L$$	Positions the edit pointer to the 100th
				line before the end of the text buffer.

		Z-12T$$		Prints the  last  twelve  lines  in the
				text buffer.

		Nxcxc$Z-12T$$	Prints the  last  twelve  lines  in the
				file, assuming the  string "xcxc" never
				occurs in it.





































VEDIT - Visual Editor					      Page 39
Command Mode - Detailed Command Description


			   EA     Edit Again
			   --     ----------

Example:	EA$$

Description:	This command writes the  entire text buffer  out to the
		output file, followed  by  the  remainder  of the input
		file if  any  and  closes  the  output  file.  All file
		backup and renaming  is performed  as with  the "EF" or
		"EX" command.  The output file is then reopened as both
		the input and output file and an auto-read on the input
		file is performed.  This command thus starts a new edit
		session and is functionally similar  to an "EX" command
		followed by invoking VEDIT  again with the  name of the
		current  output  file.  This   command  has   two  main
		purposes.  First,  it  acts  a  method  of  saving  the
		currently edited file  on disk  as a  safeguard against
		losing the file  due  to  a  user  error,  or hardware,
		software or power failure.  Second, it acts as a method
		of accessing the beginning of a large file after it has
		been written out  to disk.  This is  especially true in
		the case a block of  text is to be  moved from the rear
		of a large file to the front, since the contents of the
		text register are not affected by the "EA" command.  If
		the "Start in  Visual Mode"  switch is  set, the editor
		will go into visual mode following the "EA" command.

Notes:		Any commands following  the  "EA"  on  the command line
		will be ignored, since the command line is cleared.

See Also:	Commands: B, G, EX
		Visual Restart

Example:	132P132K$$
		EA$$
		10LG$$		Moves 132 lines  of text,  by saving it
				in  the  text   register,  killing  the
				original lines  and inserting  the text
				after the  tenth line  of the  file, in
				the situation  where  the  beginning of
				the file  is  no  longer  in  the  text
				buffer.




















VEDIT - Visual Editor					      Page 40
Command Mode - Detailed Command Description


		      EBfile[ESC]     Edit Backup
		      -----------     -----------

Example:	EBfile.txt$$

Description:	This command opens the  file 'file' for  both input and
		output and then performs an  auto-read on the file.  It
		is similar to the sequence of commands:
		ERfile[ESC]EWfile[ESC]0A$$
		except that if the file does not yet exist on disk, the
		message "NEW FILE"  is printed.  If  an output  file is
		still open, an error is printed  and the command has no
		other effect.

Notes:		The term "backup" is used here to describe this command
		since the term is used by some other editors to perform
		a  similar   operation.  Remember  that   VEDIT  always
		creates a "backup"  of a file  on disk, if  its name is
		used as the name of the output file.

See Also:	Commands: ER, EW

Example:	#W$EF$$
		EBnewfile.txt$$ The entire  text buffer  is written out
				to the current  output file,  that file
				is closed,  and the  file "NEWFILE.TXT"
				is opened for input and output and read
				in.

		ERpart1.txt$0A$$
		EBpart2.txt$$	The file "PART1.TXT"  is read  into the
				text buffer,  the  file  "PART2.TXT" is
				then made the current  input and output
				file and is appended to  the end of the
				previous file "PART1.TXT".



























VEDIT - Visual Editor					      Page 41
Command Mode - Detailed Command Description


			EC     Edit Change (Disk)
			--     ------------------

Example:	EC$$

Description:	This command must be given  before the user attempts to
		change any logged-in disks in  order to recovery from a
		disk write error, or  to read files  from another disk.
		An error is printed  if the current  disk has an output
		file which has not been closed.  In this case it should
		be closed with the "EF"  command.  This command is used
		in the event of a disk  write error where the user does
		not wish to delete any files with the "ED" command.  In
		this case  the "EF"  command should  be given  to close
		that part of the output file  which has been written to
		the original disk.  Then  issue  the  "EC" command.  It
		will prompt with a  message when the  original disk can
		be removed and  a new  disk inserted.  Type  a [RETURN]
		after the new disk  is inserted and  then issue an "EW"
		command to open a  file for output.  The  user can then
		issue any "W"  command or  the "EX"  command.  When the
		edit session is over the output file is in two parts on
		two disks.  They  can  easily  be  merged  with  a  PIP
		command or with VEDIT.  See the  "ER" command for this.
		This command can also be used to switch to another disk
		before an "ER" or "EG" command.

Notes:		Be sure that the  entire input file  has been read into
		memory before issuing the "EC" command.

See Also:	Commands: ED, EF
		Disk Write Error Recovery.

Example:	EC$$		Will give prompt:  INSERT NEW  DISK AND
				TYPE  [RETURN]  when  the  user  should
				remove the  old disk  and insert  a new
				disk.

























VEDIT - Visual Editor					      Page 42
Command Mode - Detailed Command Description


		      EDfile[ESC]     Edit Delete
		      -----------     -----------

Example:	EDfile.txt$$

Description:	This command will erase the  file 'file' from the disk.
		This is the  easiest method  of recovering  from a disk
		write error in order to make  more disk space or a free
		entry in the  directory.  The "EC" command  can also be
		used for disk write error recovery.

Notes:		Be sure that  you  do  not  delete  the  file  which is
		currently open for output.  Don't delete the input file
		until all of it has been read into memory.

See Also:	Commands: EC
		Disk Write Error Recovery

Example:	EDoldfile.txt$$ The file "OLDFILE.TXT"  is deleted from
				the disk making  more disk  space and a
				free directory entry.




		      EF     Edit Finish (Close)
		      --     -------------------

Example:	EF$$

Description:	This command  closes the  output file  and the  file is
		saved on disk.  No file is  saved on disk before either
		this command or an "EX"  command is executed.  A backup
		of any existing file on disk  with the same name as the
		output file is  created  by  renaming  it  with  a file
		extension of ".BAK".

Notes:		Since the output file is  actually opened with the CP/M
		file extension ".$$$",  the .$$$ file  is first closed,
		then any existing file  on disk  with the  same name as
		the output file is renamed to  .BAK, and last, the .$$$
		file is renamed to the true output file name.

See Also:	Commands: EW, EX

Example:	EWsave.txt$$
		#W$EF$$		The contents  of  the  text  buffer  is
				written out as the  file "SAVE.TXT" and
				that file is then closed.













VEDIT - Visual Editor					      Page 43
Command Mode - Detailed Command Description


		EGfile[line range]     Edit Get (File)
		------------------     ---------------

Example:	EGfile.txt[1,100]$$

Description:	This command will insert a  specified line number range
		of the file  "file" into  the text  buffer at  the edit
		pointer.  If insufficient memory  exists to  insert the
		entire file  segment,  as  much  as  possible  will  be
		inserted and a *BREAK* message  will be printed.  Use a
		line range of [1,10000] to insert an entire file.

Notes:		The line numbers of a file  can be printed by PIP using
		the [N] option.

See Also:	Commands: A, ER

Example:	EGlibrary.asm[34,65]$$  Lines 34 through 65 of the file
				"LIBRARY.ASM"  are  inserted  into  the
				text buffer at the edit pointer.



			  nEI     Edit Insert
			  ---     -----------

Example:	12EI$$

Description:	This command  will insert  the character  whose decimal
		value is "n" into the text  buffer at the edit pointer.
		This is useful for  entering special control characters
		into the text buffer.  One application would be printer
		formatting characters.  While  many  control characters
		can be entered using the "I"  command, some can only be
		entered with the EI command.  Characters with a decimal
		value between 128 and 255 can  also be entered with the
		EI command.  Only the "End of File" marker with a value
		of  26  cannot  be   entered.  Control  characters  are
		displayed in both command and  visual mode by preceding
		the letter with an "Up Arrow".

Notes:

See Also:	Commands: I

Example:	8EI$$		A backspace character  is inserted into
				the text buffer at the edit pointer.















VEDIT - Visual Editor					      Page 44
Command Mode - Detailed Command Description


		    EP n k[ESC]     Edit Parameters
		    -----------     ---------------

Example:	EP 1 4$$	EP 3 30$$

Description:	This command changes the value of parameter 'n' to 'k'.
		Currently there  are  5  parameters.  The  numbers  are
		specified in decimal and separated by spaces or commas.
		The default values  of these  parameters are determined
		during the customization process.  An error is given if
		'n' is specified out of range.  The parameters are:

		1    Cursor type			(0, 1 or 2)
		2    Cursor blink rate			(5 - 100)
		3    Indent Increment			(1 - 20)
		4    Lower case convert			(0, 1 or 2)
		5    Conditional convert character	(32 - 126)

		     Parameter  (1)  determines  the   type  of  cursor
		displayed in visual mode for  memory mapped versions of
		VEDIT.  The CRT terminal  versions  use  the terminal's
		cursor instead.  The  cursor  types  are:  0=Underline,
		1=Blinking Reverser Video Block,  2=Solid Reverse Video
		Block.
		     Parameter (2) determines  the cursor's  blink rate
		for cursor types 0 and 1 above.
		     Parameter (3)  determines  how  much  further  the
		editor will indent each time the [INDENT] key is typed.
		The indent position after typing  the [INDENT] key four
		times is therefore the "Indent Increment" multiplied by
		four.
		     Parameter  (4)   determines  whether   lower  case
		characters are converted to  upper case.  For value (0)
		no conversion takes place,  for (1) all  lower case are
		converted to  upper case,  and for  (2) lower  case are
		converted to upper  case, unless  the cursor  is past a
		"special" character on  the text  line.  This "special"
		character is set  by  parameter  (5).  All  of  this is
		primarily applicable to  assembly language programming,
		where it  is desirable  to have  the Label,  Opcode and
		Operand in upper  case  and  the  comment  in upper and
		lower case.
		     Parameter (5)  sets  the  conditional  upper/lower
		case convert character used for parameter (4) above.

Notes:		While  the   parameter   values   were   specified   in
		hexadecimal  during   customization,   they   must   be
		specified in decimal in command mode.

See Also:	Commands: ES
		Customization, Visual Mode, Indent and Undent Functions

Example:	EP 1 6$$	This  sets  the  "Indent  Increment" to
				six.








VEDIT - Visual Editor					      Page 45
Command Mode - Detailed Command Description


			   EQ     Edit Quit
			   --     ---------

Example:	EQ$$

Description:	This command quits the edit session without writing out
		the text buffer  or closing any  output file.  Its main
		purpose to "quit" after one  has made a mistake editing
		and it seems best to leave  everything on disk just the
		way it was  before  this  edit  session  began.  DO NOT
		confuse this  command  with  the  "EA"  command;  their
		results are  quite  opposite.  Remember  that  the "EA"
		command starts a new edit session.

Notes:		Any output file  with  the  file  extension ".$$$" will
		also be deleted.  Any  original file  on disk  with the
		same name as the output file,  but with an extension of
		".BAK"  will  have  been  deleted   if  more  than  128
		characters were written  to  the  (now  deleted) output
		file.  With the exception of this possible backup file,
		all other files  will exist  on disk  just as  they did
		before the aborted edit session.

See Also:	Commands: EA

Example:	#K$$		Shoot!! Meant -#K$$
		EQ$$		Since a bad  mistake  was  made  in the
				above command, it is best to abort this
				edit session, go back to CP/M and start
				over.
































VEDIT - Visual Editor					      Page 46
Command Mode - Detailed Command Description


			ERfile[ESC]     Edit Read
			-----------     ---------

Example:	ERnewfile.txt$$

Description:	This command opens the file 'file' for input (reading).
		Nothing is read into the text buffer with this command.
		The "A"  command or  an auto-read  is used  to actually
		read the input file.  If the same file was already open
		for input, the file is "rewound",  so that the file can
		again be read from the  beginning.  An error is printed
		if the file 'file'  does not exist.  Files  can also be
		read from disks  which  are  not  currently  running by
		using the "EC" command.  Issue the "EC" command, insert
		the new disk into  a drive which is  not being used for
		any output file and  open a  file for  reading with the
		"ER" command.  This may be necessary in case a file has
		been split  into two  parts during  a disk  write error
		recovery.

Notes:

See Also:	Commands: A, EC, EB, EW

Example:	ERparts.inv$$
		20A$$		The  file  "PARTS.INV"  is  opened  for
				input and  twenty  lines  from  it  are
				appended to the end of the text buffer.




			ES n k[ESC]     Edit Set
			-----------     --------

Example:	ES 1 0$$	ES 3 1$$

Description:	This command changes  the value  of switch  'n' to 'k'.
		Currently  there  are  7   switches.  The  numbers  are
		specified in decimal and separated by spaces or commas.
		The default values  of  these  switches  are determined
		during the customization process.  An error is given if
		'n' is specified out of range.  The switches are:

		1    Expand Tab with spaces		(0=NO 1=YES)
		2    Auto buffering in visual mode	(0=NO 1=YES)
		3    Start in visual mode		(0=NO 1=YES)
		4    Point past text reg. insert	(0=NO 1=YES)
		5    Ignore UC/LC distinction in search (0=NO 1=YES)
		6    Clear screen on visual exit	(0=NO 1=YES)
		7    Reverse Upper and Lower case	(0=NO 1=YES)

		     Switch (1) determines  whether or not  the tab key
		in visual mode is expanded with  spaces to the next tab








VEDIT - Visual Editor					      Page 47
Command Mode - Detailed Command Description


		position.  If not, a tab character is inserted into the
		text buffer.  Except for special  applications, the tab
		key would not normally be expanded with spaces.
		     Switch   (2)    determines    whether    or    not
		auto-buffering is enabled in  visual mode.  The editing
		of a large file is usually simpler with this switch on,
		since  the  user   does  not  need   to  give  explicit
		Read/Write commands.  If  some  more  complicated  file
		handling, with explicit Read/Write commands (ER, EW, A,
		W) is being done, the switch should then temporarily be
		set off.
		     Switch (3)  determines  whether  or  not  the edit
		session will  begin  in  visual  mode.   Changing  this
		switch while running VEDIT will  only apply to the "EA"
		command.
		     Switch (4) determines the  edit pointer's position
		(or cursor's in  visual  mode)  following  insertion of
		the text register.  If  the  switch  is  off,  the edit
		pointer is not moved, and is thus left at the beginning
		of the newly inserted  text.  If the switch  is on, the
		edit pointer is  moved  just  past  the  newly inserted
		text.
		     Switch (5)  determines whether  VEDIT will  make a
		distinction between upper  and  lower  case  letters in
		searches and substitutes  using  the  "F",  "N" and "S"
		commands.  Most users will probably  wish to ignore the
		distinction, so that the string "why" will match "Why",
		"WHY" and "why".  Setting  the switch to  "1" will make
		VEDIT ignore  the distinction  between upper  and lower
		case characters during searches.
		     Switch (6) determines  whether the  screen will be
		cleared when visual  mode  is  exited  and command mode
		entered.  If the screen  is  not  cleared,  the command
		mode prompt "*"  will  appear  below  the  status line.
		Setting the switch  to "1"  will clear  the screen when
		visual mode is exited.
		     Switch (7) determines whether all letters typed on
		the keyboard will be reversed with respect to upper and
		lower case.  It should normally be  OFF, but does allow
		a user with an upper case  only keyboard to enter lower
		case letters.  Setting  the  switch  to  "1"  will make
		VEDIT reverse all keyboard letters in both commmand and
		visual mode.

Notes:

See Also:	Customization, Visual Mode

Example:	ES 1 1$$	This enables tabs  typed in visual mode
				to be expanded with spaces.












VEDIT - Visual Editor					      Page 48
Command Mode - Detailed Command Description


			    ET     Edit Tab
			    --     --------

Example:	ET 20 40 60 80 100 120$$

Description:	This command changes  the tab  table used  by VEDIT for
		displaying tab characters, and in Visual mode, when the
		"Expand  Tab"   switch  is   set,  for   expanding  tab
		characters.  Up to 30  tab  positions  are  allowed and
		they must  be  in  the  range  1  -  254.  The  default
		positions  are  set   during  customization.  For  word
		processing the tabs can be set to the same positions as
		are specified for the text  formatting program in order
		to see  how they  will look  in the  final product.  An
		error is printed if a bad position is given.  No tab is
		needed at position 1, and counting  starts at 1 (not at
		zero).  Thus the normal tab positions would be:

		9 17 25 33 41 49 57 65 73 81 89 97
		105 113 121 129

Notes:		For use in Visual mode, there  must be at least one tab
		position per screen line,  i.e. at least  one tab every
		64 or 80 positions.

See Also:	Customization, Visual Mode, Indent and Undent Functions

Example:




			  EV     Edit Version
			  --     ------------

Example:	EV$$

Description:	This command  prints  the  VEDIT  version number.  This
		number should be  used in  any correspondence  you have
		with  us  concerning  the   operation  of  VEDIT.  This
		command can also  be  used  inside  iteration macros to
		give some indication of the progress being made in long
		executing macros.

Notes:

See Also:

Example:













VEDIT - Visual Editor					      Page 49
Command Mode - Detailed Command Description


		      EWfile[ESC]     Edit Write
		      -----------     ----------

Example:	EWnewdat.inv$$

Description:	This command  opens  the  file  'file'  for  output and
		subsequent writing.  No  text  is  actually  written by
		this command.  Some file  must be opened  for output in
		order to save  any text  on disk.  A  file can  also be
		opened by  the "EB",  "EA" commands  and when  VEDIT is
		invoked from  CP/M.  If  a  file  is  already  open for
		output, an error is  printed and no  other action takes
		place.

Notes:		The file opened is  actually a temporary  file with the
		same name, but  with an extension  of ".$$$".  The file
		is not made permanent and given  its true name until it
		is closed with  the "EF",  "EA", or  "EX" commands.  At
		that time, any existing file on disk with the same name
		as the output file is backed  up by renaming it with an
		extension of  ".BAK".  Any existing  file on  disk with
		that name and the  .BAK extension will  be deleted when
		more than 128 bytes  (the first sector)  are written to
		the output file.

See Also:	Commands: W, EA, EF, EX

Example:	EWpart1.txt$$
		24W$$
		EF$$
		EWpart2.txt$$
		EX$$		The first 24  lines of  the text buffer
				are written out to file "PART1.TXT" and
				the rest of the  text buffer is written
				out  to   file  "PART".TXT"   and  edit
				session is completed.

		ERa:bigfile.asm$$
		EWb:bigfile.asm$$
		0A$v$$		Typical procedure  for  editing  a file
				which is too  big for  both it  and its
				Backup to  fit  on  the  same disk.  In
				this case, it is read  from disk A: and
				written to disk B:.  Just  be sure that
				disk B: is nearly empty.

















VEDIT - Visual Editor					      Page 50
Command Mode - Detailed Command Description


			   EX     Edit Exit
			   --     ---------

Example:	EX$$

Description:	This is  the  normal  exit  from  VEDIT  when  the file
		currently being edited is to written out to disk.  This
		command writes the entire text buffer out to the output
		file, followed by  the remainder  of the  input file if
		any, closes  the output  file and  exits back  to CP/M.
		All file backup and  renaming is done  as with the "EF"
		command.  An error is  printed  if  no  output  file is
		open, and no other action is taken.
Notes:

See Also:	Commands: EB, EF, EW, EA, EQ

Example:	VEDIT FILE.TXT
		V$$
		EX$$		The editor is invoked in the normal way
				to edit a file.  The  file is edited in
				visual mode, and when  done, the normal
				exit back to CP/M is made.







































VEDIT - Visual Editor					      Page 51
Command Mode - Line Editing


     Several common control characters are  recognized in command mode
as line editing characters.  They are:


[CTRL-H] or [BACKSPACE] Delete the  last  character  typed  and echo a
			[CTRL-H] to the console.

[RUBOUT] or [DELETE]	Delete the last  character typed  and echo the
			deleted character to the console.

[CTRL-R]		Doesn't change the  command  line,  but echoes
			the entire command line back to the console.

[CTRL-U]		Delete the entire command line  and send a "#"
			to the console.

[CTRL-X]		Identical to [CTRL-U].











































